démon MDIR
==========

Privilégier une approche complètement assynchrone par évènements.  Utiliser 
libpth qui fait ça très bien et est très portable.

Modules de la lib générale (libcommons)
---------------------------------------

Communication :
~~~~~~~~~~~~~~~

- connect(flux/messages, adresse)
- disconnect
- receive
- send
- serve(flux/message, address, thread)

Conserver l'abstraction des adresses (par exemple, ce serait bien de pouvoir 
mettre un fichier).

connect renvoie un fildesc.

Système :
~~~~~~~~~

- configuration (envvar sous unix) ;

- commandes (console) ;
  L'idée ici est double : avoir une console de configuration/administration 
(avec une commande pour ouvrir le service pour éviter que les requetes ne 
soient traitées sans configuration), et pouvoir interpréter les ordres 
provenant des clients de mdird.

- démonisation ;
  Mise en background du process

- logs ;

Journal du mdir (libjnl)
------------------------

Pour le journal et les méta données uniquement. Utilisé par mdird et 
probablement à l'avenir quelques outils satellite (synchronisation de mdir, 
notamment).


Commandes de mdird
------------------

Le mdir gère la présence de fichiers, dont il ne connait que les headers 
(l'url étant une méta-donnée facultative mais généralement présente qui peu t 
permettre de distinguer des fichiers sinon différetns ou de récupérer un 
contenu), dans des répertoires. Il permet à ses clients d'ajouter des fichiers 
à des endroits précis oubien de les classer à partir d'un endroit précis 
(généralement à la racine) ou de les retirer (rappel : on retire les headers, 
pas le contenu, qui est toujours disponible dans le msgstore avec ses 
headers).

Les commandes entre client et serveur sont assynchrones et incenssibles à la 
casse (sauf pour leurs éventuels arguments). Le protocole est assymétrique : 
le client pose les questions et le serveur y répond. Le serveur mdird ne peut 
se transformer en client. Pour la synchronisation entre différents serveurs 
mdird, on utilisera un autre protocoles (copie des snapshots). Cela simplifie 
_beaucoup_.

Les requètes sont donc préfixées d'un numéro unique servant à les associer 
avec leur réponse (par exemple une séquence mais ce n'est pas obligé). Ce 
numéro ne doit pas excéder 64 bits, ce qui est amplement suffisant pour une 
session. Les réponse commencent par ce numéro, puis le nom de la commande, 
puis un status. Le nom de la commande est utile dans le cas où un client 
voudrait "skipper" une réponse sans le souvenir de ce qu'il avait demandé.

Les status sont inspirés du HTTP (2XX pour OK, 5XX pour erreurs...)

Les commandes sont les suivantes :

DIFF
~~~~

Arguments : *répertoire* et *version*
où version est un entier sur 64 bits.

Par exemple : "4012 DIFF /emails/Joe/work 746231"

Réponse du serveur : Une liste de headers séparés par des lignes d'action (ie 
ne contenant que '%+ *version*' ou '%- *version*') et terminée par une ligne 
ne contenant que '%%'.

Si l'action est '%+', un fichier représenté par ce header doit être ajouté 
s'il n'existe pas déjà et si c'est '%-' tout fichiers possédant ce header 
devra être effacé (les headers sont donc uniques par répertoire, par 
construction). La dernière commande reçue et comprise par le client lui permet
d'accéder à la version indiquée. C'est plus verbeux qu'une seule version 
figurant à la fin de la liste, mais cela peut permettre au client de se 
rattraper partiellement en cas de transfert incomplet.

C'est pour répondre au DIFF qu'un mdird à besoin du journal (et des 
snapshots).

On utilise '%+', '%-' et '%%' pour minimiser le risque d'avoir un non de 
champs commencant par le délimiteur (ce qui est interdit) et facilité le 
dialogue manuel avec un mdird. Par ailleurs, et pour cette dernière raison, on 
ignorera toujours les espaces en fin de ligne.

Code de retours : 200 pour OK, 5XX pour erreurs, et 201 pour signifier que le 
DIFF est en fait un FULL (depuis la version 0), ie tous les messages qui ne 
seront pas explicitement ajoutés doivent être effacés.

PUT
~~~

Arguments : *répertoire*
puis les headers terminés par une ligne ne contenant que '%%'.

Cela place de fichier dans le répertoire.

Réponse : PUTRESP *répertoire* *status*

CLASS
~~~~~

Semblable à PUT, mais le fichier est soumis au classement automatique.

REM
~~~

Format semblable à PUT, mais signifiant au contraire que tout fichier 
possédant ces headers doit être retiré.


